
1. **Extract unique values from dictionary values:**
def extract_unique_values(d):
    unique_values = set()
    for value in d.values():
        if isinstance(value, list):
            unique_values.update(value)
        else:
            unique_values.add(value)
    return unique_values

# Example usage:
my_dict = {'a': [1, 2, 3], 'b': [2, 3, 4], 'c': 4, 'd': 5}
print("Unique values from dictionary:", extract_unique_values(my_dict))

2. **Find the sum of all items in a dictionary:**
def sum_of_items(d):
    return sum(d.values())

# Example usage:
my_dict = {'a': 10, 'b': 20, 'c': 30}
print("Sum of all items in dictionary:", sum_of_items(my_dict))

3. **Merge two dictionaries:**
def merge_dictionaries(d1, d2):
    return {**d1, **d2}

# Example usage:
dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}
merged_dict = merge_dictionaries(dict1, dict2)
print("Merged dictionary:", merged_dict)

4. **Convert key-values list to a flat dictionary:**
def convert_to_flat_dict(key_value_list):
    return {key: value for key, value in key_value_list}

# Example usage:
key_value_list = [("a", 1), ("b", 2), ("c", 3)]
flat_dict = convert_to_flat_dict(key_value_list)
print("Flat dictionary:", flat_dict)


5. **Insertion at the beginning in OrderedDict:**
from collections import OrderedDict

def insert_at_beginning(d, key, value):
    d.move_to_end(key, last=False)
    d[key] = value

# Example usage:
my_ordered_dict = OrderedDict([('a', 1), ('b', 2), ('c', 3)])
insert_at_beginning(my_ordered_dict, 'x', 10)
print("OrderedDict after insertion at the beginning:", my_ordered_dict)


6. **Check the order of characters in a string using OrderedDict:**
from collections import OrderedDict

def check_order_of_characters(s, pattern):
    pattern_dict = OrderedDict.fromkeys(pattern)
    j = 0
    for key in pattern_dict:
        if key in s[j:]:
            j = s.index(key, j) + 1
        else:
            return False
    return True

# Example usage:
my_string = "hello world"
my_pattern = "hlo"
print("Order of characters in string matches pattern?", check_order_of_characters(my_string, my_pattern))

7. **Sort Python dictionaries by key or value:**
# Sorting by key
def sort_dict_by_key(d):
    return dict(sorted(d.items()))

# Sorting by value
def sort_dict_by_value(d):
    return dict(sorted(d.items(), key=lambda item: item[1]))

# Example usage:
my_dict = {'b': 3, 'a': 2, 'c': 1}
print("Dictionary sorted by key:", sort_dict_by_key(my_dict))
print("Dictionary sorted by value:", sort_dict_by_value(my_dict))
