Q1. A probability distribution describes the likelihood of different outcomes occurring in an experiment or random process. It provides a way to quantify the uncertainty or randomness associated with the outcomes. While the individual outcomes may be random, the distribution itself often follows a specific pattern or shape, which helps in making predictions about the likelihood of different events occurring.

Q2. True random numbers are generated from physical processes that are inherently unpredictable, such as atmospheric noise or radioactive decay. Pseudo-random numbers, on the other hand, are generated by algorithms and are deterministic in nature. Although pseudo-random numbers are not truly random, they exhibit properties that make them suitable for many practical purposes, such as statistical simulations and cryptographic applications.

Q3. The two main factors that influence the behavior of a normal probability distribution are the mean (μ) and the standard deviation (σ). The mean determines the central tendency or average of the distribution, while the standard deviation measures the spread or variability of the data around the mean.

Q4. A real-life example of a normal distribution is the distribution of heights or weights in a population, such as adult humans. In many populations, heights and weights tend to follow a normal distribution, with most individuals clustered around the mean height or weight, and fewer individuals at the extremes.

Q5. In the short term, a probability distribution may exhibit variability and uncertainty, but as the number of trials increases, the distribution tends to stabilize and approach its theoretical properties. With a large number of trials, the observed frequencies of outcomes tend to converge to the probabilities predicted by the distribution, in accordance with the law of large numbers.

Q6. The `random.shuffle` function in Python can shuffle lists, arrays, or any mutable sequence object.

Q7. The `math` package in Python consists of general categories of functions such as:

- Basic mathematical functions (e.g., trigonometric functions, logarithms, exponentiation)
- Constants (e.g., pi, Euler's number)
- Special mathematical functions (e.g., gamma function, error function)
- Floating-point arithmetic functions (e.g., rounding, absolute value)

Q8. The relationship between exponentiation and logarithms is inverse. Exponentiation is the operation of raising a base to a power, while logarithms are the inverse operations of exponentiation. In mathematical terms, if \( a^b = c \), then \( \log_a(c) = b \).

Q9. Python supports three logarithmic functions:

- `math.log(x[, base])`: Computes the natural logarithm (base e) of x, or the logarithm of x to the specified base.
- `math.log10(x)`: Computes the base-10 logarithm of x.
- `math.log2(x)`: Computes the base-2 logarithm of x.