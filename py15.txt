

# Task 1: Calculate seconds in an hour
seconds_per_minute = 60
minutes_per_hour = 60
seconds_per_hour = seconds_per_minute * minutes_per_hour
print("Seconds in an hour:", seconds_per_hour)

# Task 3: Calculate seconds in a day
hours_per_day = 24
seconds_per_day = seconds_per_hour * hours_per_day
print("Seconds in a day:", seconds_per_day)

# Task 4: Calculate seconds per day and save it to seconds_per_day variable
seconds_per_day = seconds_per_hour * 24

# Task 5: Floating-point division of seconds_per_day by seconds_per_hour
float_division = seconds_per_day / seconds_per_hour
print("Floating-point division:", float_division)

# Task 6: Integer division of seconds_per_day by seconds_per_hour
integer_division = seconds_per_day // seconds_per_hour
print("Integer division:", integer_division)

# Task 7: Write a generator for prime numbers
def genPrimes():
    primes = [2]
    yield 2
    next_num = 3
    while True:
        is_prime = True
        for prime in primes:
            if next_num % prime == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(next_num)
            yield next_num
        next_num += 2

# Testing the genPrimes generator
prime_generator = genPrimes()
for _ in range(10):
    print(next(prime_generator), end=" ")
```

This code accomplishes the tasks you specified:

1. Calculates the number of seconds in an hour.
2. Assigns the result to a variable called `seconds_per_hour`.
3. Calculates the number of seconds in a day using the previously calculated value.
4. Calculates the number of seconds in a day and saves it to a variable called `seconds_per_day`.
5. Performs floating-point division of `seconds_per_day` by `seconds_per_hour`.
6. Performs integer division of `seconds_per_day` by `seconds_per_hour`.
7. Defines a generator, `genPrimes`, that yields prime numbers on successive calls to its `next()` method.