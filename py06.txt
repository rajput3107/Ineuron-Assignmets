1. Escape characters are special characters used in strings to represent characters that are difficult or impossible to type directly. They are preceded by a backslash (\) in Python. Escape characters allow you to include characters in a string that would otherwise be difficult to represent directly, such as newline characters or quotation marks.

2. In Python, the escape character '\n' stands for a newline, while '\t' stands for a tab.

3. To include a backslash character in a string, you can use a double backslash (\\). For example, `"This is a backslash: \\"`.

4. In the string `"Howl's Moving Castle"`, the single quote character in "Howl's" isn't escaped because the entire string is enclosed in double quotes `"`. In Python, you can use either single quotes `'` or double quotes `"` to define strings. So, using double quotes allows you to include single quotes within the string without escaping them.

5. If you don't want to use the `\n` character to represent newlines in a string, you can use triple quotes (`'''` or `"""`) to create multiline strings. For example:

multiline_string = '''
This is line 1
This is line 2
'''


6. 
   - `'Hello, world!'[1]` returns `'e'`.
   - `'Hello, world!'[0:5]` returns `'Hello'`.
   - `'Hello, world!'[:5]` returns `'Hello'`.
   - `'Hello, world!'[3:]` returns `'lo, world!'`.

7. 
   - `'Hello'.upper()` returns `'HELLO'`.
   - `'Hello'.upper().isupper()` returns `True` because the entire string is in uppercase.
   - `'Hello'.upper().lower()` returns `'hello'`.

8. 
   - `'Remember, remember, the fifth of July.'.split()` splits the string into a list of words: `['Remember,', 'remember,', 'the', 'fifth', 'of', 'July.']`.
   - `'-'.join('There can only one.'.split())` splits the string into words and then joins them with `-`: `'There-can-only-one.'`.

9. The methods for right-justifying, left-justifying, and centering a string are:
   - Right-justifying: `rjust()`
   - Left-justifying: `ljust()`
   - Centering: `center()`

10. The best way to remove whitespace characters from the start or end of a string is to use the `strip()` method. To remove whitespace characters only from the start, use `lstrip()`, and to remove them from the end, use `rstrip()`.