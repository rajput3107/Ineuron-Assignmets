
1. **Function to Calculate Sum of Numbers Divisible by a Given Number:**
def evenly_divisible(a, b, c):
    return sum(num for num in range(a, b+1) if num % c == 0)

# Test cases
print(evenly_divisible(1, 10, 20))  # ➞ 0
print(evenly_divisible(1, 10, 2))   # ➞ 30
print(evenly_divisible(1, 10, 3))   # ➞ 18

2. **Function to Check Correctness of Inequality Expression:**
def correct_signs(expr):
    return eval(expr)

# Test cases
print(correct_signs("3 < 7 < 11"))      # ➞ True
print(correct_signs("13 > 44 > 33 > 1")) # ➞ False
print(correct_signs("1 < 2 < 6 < 9 > 3"))# ➞ True

3. **Function to Replace Vowels in a String:**
def replace_vowels(string, char):
    vowels = 'aeiouAEIOU'
    for vowel in vowels:
        string = string.replace(vowel, char)
    return string

# Test cases
print(replace_vowels("the aardvark", "#"))  # ➞ "th# ##rdv#rk"
print(replace_vowels("minnie mouse", "?"))  # ➞ "m?nn?? m??s?"
print(replace_vowels("shakespeare", "*"))    # ➞ "sh*k*sp**r*"


4. **Recursive Function to Calculate Factorial:**
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

# Test cases
print(factorial(5))  # ➞ 120
print(factorial(3))  # ➞ 6
print(factorial(1))  # ➞ 1
print(factorial(0))  # ➞ 1


5. **Function to Compute Hamming Distance Between Two Strings:**

def hamming_distance(str1, str2):
    return sum(1 for ch1, ch2 in zip(str1, str2) if ch1 != ch2)

# Test cases
print(hamming_distance("abcde", "bcdef"))  # ➞ 5
print(hamming_distance("abcde", "abcde"))  # ➞ 0
print(hamming_distance("strong", "strung")) # ➞ 1
