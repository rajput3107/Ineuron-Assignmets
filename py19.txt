

1. Making a class called Thing and creating an object called example:

class Thing:
    pass

print(Thing)  # Printing the class itself
example = Thing()  # Creating an object of class Thing
print(example)  # Printing the object
```

The printed values will be different. The first one prints the class itself, and the second one prints the object instance.

2. Creating a class called Thing2 and adding the value 'abc' to the letters class attribute:

```python
class Thing2:
    letters = 'abc'

print(Thing2.letters)  # Printing the class attribute
```

3. Making a class called Thing3 and assigning the value 'xyz' to an instance attribute called letters:

```python
class Thing3:
    def __init__(self):
        self.letters = 'xyz'

# You need to create an object from the class to access its instance attributes
thing_instance = Thing3()
print(thing_instance.letters)
```

4. Creating an Element class with instance attributes and making a class object:

```python
class Element:
    def __init__(self, name, symbol, number):
        self.name = name
        self.symbol = symbol
        self.number = number

# Creating an object of class Element
hydrogen = Element('Hydrogen', 'H', 1)
```

5. Making a dictionary and creating an object called hydrogen from class Element using this dictionary:

```python
element_dict = {'name': 'Hydrogen', 'symbol': 'H', 'number': 1}
hydrogen = Element(**element_dict)
```

6. Defining a method called dump() for the Element class:

```python
class Element:
    def __init__(self, name, symbol, number):
        self.name = name
        self.symbol = symbol
        self.number = number
    
    def dump(self):
        print(f"Name: {self.name}, Symbol: {self.symbol}, Number: {self.number}")

hydrogen = Element('Hydrogen', 'H', 1)
hydrogen.dump()

7. Changing the name of the method dump to __str__:

class Element:
    def __init__(self, name, symbol, number):
        self.name = name
        self.symbol = symbol
        self.number = number
    
    def __str__(self):
        return f"Name: {self.name}, Symbol: {self.symbol}, Number: {self.number}"

hydrogen = Element('Hydrogen', 'H', 1)
print(hydrogen)

8. Modifying Element to make the attributes private and defining getter properties for each:

class Element:
    def __init__(self, name, symbol, number):
        self.__name = name
        self.__symbol = symbol
        self.__number = number
    
    @property
    def name(self):
        return self.__name
    
    @property
    def symbol(self):
        return self.__symbol
    
    @property
    def number(self):
        return self.__number

hydrogen = Element('Hydrogen', 'H', 1)
print(hydrogen.name)
print(hydrogen.symbol)
print(hydrogen.number)

9. Defining three classes with one method each:

class Bear:
    def eats(self):
        return 'berries'

class Rabbit:
    def eats(self):
        return 'clover'

class Octothorpe:
    def eats(self):
        return 'campers'

# Creating objects and printing what they eat
bear = Bear()
rabbit = Rabbit()
octothorpe = Octothorpe()
print(bear.eats())
print(rabbit.eats())
print(octothorpe.eats())


10. Defining three classes with one method each and a Robot class:


class Laser:
    def does(self):
        return 'disintegrate'

class Claw:
    def does(self):
        return 'crush'

class SmartPhone:
    def does(self):
        return 'ring'

class Robot:
    def __init__(self):
        self.laser = Laser()
        self.claw = Claw()
        self.smartphone = SmartPhone()
    
    def does(self):
        return f"Laser: {self.laser.does()}, Claw: {self.claw.does()}, SmartPhone: {self.smartphone.does()}"

robot = Robot()
print(robot.does())
